using Sample.OpenApi.Extensions.Models;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Mvc.ApiExplorer;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using Swashbuckle.AspNetCore.SwaggerGen;

//TODO: include documentation .md to explain versioning by folder/query and how to mark up code
//TODO: need to pass the documentation .xml file to underlying package

namespace Sample.OpenApi.Extensions
{
    using Sample.OpenApi.Extensions.Models;

    /// <summary>
    /// Extension method for OpenAPI (swagger) API documentation
    /// </summary>
    /// <autogeneratedoc />
    public static class Extensions
    {
        /// <summary>
        /// Add the OpenAPI (swagger) API configuration and services
        /// </summary>
        /// <param name="services">Dependency injection container</param>
        /// <param name="xmlDocumentationFileName">Name of the XML documentation file.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public static IServiceCollection AddMyOpenApiConfiguration(this IServiceCollection services, string xmlDocumentationFileName)
        {
            services.AddApiVersioning(
                options =>
                {
                    // reporting supported and deprecated api versions
                    options.ReportApiVersions = true;
                });

            services.AddVersionedApiExplorer(
                options =>
                {
                    options.GroupNameFormat = "'v'VVV";
                    options.SubstituteApiVersionInUrl = true;
                });

            services.AddTransient<IConfigureOptions<SwaggerGenOptions>, ConfigureSwaggerOptions>();

            services.AddSwaggerGen(c =>
            {
                //enable this line to show an example of manipulating parameters in the documentation
                //c.OperationFilter<CustomPrefixExampleFilter>();
                c.OperationFilter<SecurityRequirementsOperationFilter>();
                c.OperationFilter<ProducesApplicatonJsonOperationFilter>();
                c.IncludeXmlComments(xmlDocumentationFileName);
                c.DescribeAllEnumsAsStrings();
                c.EnableAnnotations();
            });

            return services;
        }

        /// <summary>
        /// Include the OpenAPI (swagger) API documentation services into the middleware pipeline
        /// </summary>
        /// <param name="app">The application.</param>
        /// <param name="provider">The API description provider.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public static IApplicationBuilder UseMyOpenApiConfiguration(this IApplicationBuilder app, IApiVersionDescriptionProvider provider)
        {
            app.UseSwagger(options => options.RouteTemplate = "docs/{documentName}/swagger.json");

            app.UseSwaggerUI(
                options =>
                {
                    // build a swagger endpoint for each discovered API version
                    foreach (var description in provider.ApiVersionDescriptions)
                    {
                        options.SwaggerEndpoint($"/docs/{description.GroupName}/swagger.json", description.GroupName.ToUpperInvariant());

                        options.RoutePrefix = "docs";

                        //removes 'try it out' button
                        //options.SupportedSubmitMethods();
                    }
                });

            return app;
        }
    }
}
